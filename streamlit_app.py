# -*- coding: utf-8 -*-
"""Gattaca_-_A_experiencia_genetica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FhEF3py6ZxZX10xybA46KzPNTIQcG008

# Qual é a sua orientação vocacional?
"""

#!pip install -q -U google-generativeai

#!pip install -q -U requests

#!pip install streamlit

import google.generativeai as genai
#from google.colab import userdata
import requests
import streamlit as st

#YOUR_API_KEY = userdata.get('YOUR_API_KEY')
YOUR_API_KEY = st.secrets['YOUR_API_KEY']
genai.configure(api_key = YOUR_API_KEY)

# Set up the model
generation_config = {
  "temperature": 1,
  "candidate_count": 1
}

safety_settings = [
  {
    "category": "HARM_CATEGORY_HARASSMENT",
    "threshold": "BLOCK_ONLY_HIGH"
  },
  {
    "category": "HARM_CATEGORY_HATE_SPEECH",
    "threshold": "BLOCK_ONLY_HIGH"
  },
  {
    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    "threshold": "BLOCK_ONLY_HIGH"
  },
  {
    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
    "threshold": "BLOCK_ONLY_HIGH"
  },
]

model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest",
                              generation_config=generation_config,
                              safety_settings=safety_settings)

""" Carregando os prompts... aguarde um momento """

# Carrega o arquivo com os shots do repositório do Github
url = 'https://raw.githubusercontent.com/diogocf/Gattaca_-_A_Experiencia_Genetica/main/Few-Shot%20images/Few-Shots%20Prompts.json'
resposta = requests.get(url)

# resposta.content
few_shots_json = resposta.json()
#few_shots_json

# Envia os Few-Shots para o modelo
chat = model.start_chat()
v1 = chat.send_message(few_shots_json['few_shots'])

"""### Escolha uma foto de sua infância para que o modelo de IA diga qual é a sua orientação vocacional"""

#from google.colab import files
from io import BytesIO
from PIL import Image
#import matplotlib.pyplot as plt
#from IPython.display import Markdown

def input_foto():
  """ Carregando a foto... aguarde um momento """
  #""" Mostra o prompt de entrada para carregar uma foto """
  uploaded_file = st.file_uploader(label = "Escolha uma foto", type = ['png', 'jpg'])
  if uploaded_file is None:
    return (None, None)

  #""" Mostra a foto carregada """
  st.image(BytesIO(uploaded_file.getvalue()))

  return (uploaded_file.name, uploaded_file.getvalue())

# Envia o prompt para descrever a foto
prompt_descrever_foto = 'analise o olhar, a expressão facial, postura, atitude, sentimento da criança na foto. Dê a resposta em formato de lista enumerado com no máximo 10 itens.'

# Envia o prompt com a foto
(foto_crianca_filename, foto_crianca_bytes) = input_foto()
if foto_crianca_filename is None or foto_crianca_bytes is None:
  print('Você não selecionou uma foto')

else:
  """ Analisando a foto... aguarde um momento """

  # Envia prompt para fazer a descrição da foto em um contexto diferente do chat
  #image_content = Image.open(foto_crianca_bytes)
  image_content = Image.open(BytesIO(foto_crianca_bytes))
  prompt_descricao_foto = model.generate_content([prompt_descrever_foto, image_content]).text

  # Envia descrição da foto para receber a previsão genética com as profissões e talentos
  #Markdown(chat.send_message(prompt_descricao_foto).text)
  analise = chat.send_message(prompt_descricao_foto, stream=True)
  text_response = []
  for chunk in analise:
      text_response.append(chunk.text)
  analise = "".join(text_response)

  if analise is None or analise == '' or not analise.find('rofiss'):
    analise = '**Limite de pesquisas atingido. Tente novamente, mais tarde.**'

  analise